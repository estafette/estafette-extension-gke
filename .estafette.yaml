builder:
  track: dev

labels:
  app-group: estafette-ci-extensions
  team: estafette-team
  language: golang

version:
  semver:
    major: 0
    minor: 1

stages:
  build:
    image: golang:1.12.5-alpine3.9
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOFLAGS: -mod=vendor
    commands:
    - go test ./...
    - go build -a -installsuffix cgo -ldflags "-X main.app=${ESTAFETTE_GIT_NAME} -X main.version=${ESTAFETTE_BUILD_VERSION} -X main.revision=${ESTAFETTE_GIT_REVISION} -X main.branch=${ESTAFETTE_GIT_BRANCH} -X main.buildDate=${ESTAFETTE_BUILD_DATETIME}" -o ./publish/${ESTAFETTE_GIT_NAME} .

  bake:
    image: extensions/docker:dev
    action: build
    inline: |
      FROM google/cloud-sdk:250.0.0-alpine

      LABEL maintainer="estafette.io" \
            description="The ${ESTAFETTE_GIT_NAME} component is an Estafette extension to deploy applications to a Kubernetes Engine cluster"

      RUN curl https://storage.googleapis.com/kubernetes-release/release/v1.14.1/bin/linux/amd64/kubectl --output /google-cloud-sdk/bin/kubectl \
          && chmod +x /google-cloud-sdk/bin/kubectl \
          && kubectl version --client

      COPY ${ESTAFETTE_GIT_NAME} /
      COPY templates /templates

      ENTRYPOINT ["/${ESTAFETTE_GIT_NAME}"]
    container: gke
    repositories:
    - extensions
    path: ./publish
    copy:
    - templates

  test-alpha-version:
    image: extensions/gke:${ESTAFETTE_BUILD_VERSION}
    credentials: gke-tooling
    action: deploy-simple
    kind: deployment
    app: gke
    namespace: estafette
    visibility: public-whitelist
    whitelist:
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
    container:
      repository: extensions
      name: gke
      tag: alpha
      port: 5000
      additionalports:
      - name: grpc
        port: 8085
        protocol: TCP
        visibility: private
      - name: snmp
        port: 8086
        protocol: UDP
        visibility: public
      env:
        MY_CUSTOM_ENV: value1
        MY_OTHER_CUSTOM_ENV: value2
        MY_BOOL_ENV: true
        MY_INT_ENV: 123123
      cpu:
        request: 100m
        limit: 100m
      memory:
        request: 256Mi
        limit: 256Mi
      liveness:
        path: /liveness
        port: 5001
        delay: 30
        timeout: 1
      readiness:
        path: /readiness
        port: 5002
        delay: 30
        timeout: 1
      metrics:
        scrape: true
        path: /metrics
        port: 5003
      lifecycle:
        prestopsleep: true
        prestopsleepseconds: 15
    sidecar:
      type: openresty
      image: estafette/openresty-sidecar:1.13.6.1-alpine
      healthcheckpath: /readiness
      env:
        CORS_ALLOWED_ORIGINS: "*"
        CORS_MAX_AGE: "86400"
        MY_BOOL_ENV: true
        MY_INT_ENV: 123123
      cpu:
        request: 10m
        limit: 50m
      memory:
        request: 10Mi
        limit: 50Mi
    sidecars:
    - type: cloudsqlproxy
      dbinstanceconnectionname: my-gcloud-project:europe-west1:my-database
      sqlproxyport: 5043
      sqlproxyterminationtimeoutseconds: 30
      cpu:
        request: 10m
        limit: 50m
      memory:
        request: 10Mi
        limit: 50Mi
    autoscale:
      min: 3
      max: 50
      cpu: 80
      safety:
        enabled: true
        promquery: "sum(rate(nginx_http_requests_total{app='my-app'}[5m])) by (app)"
        ratio: 2.5
        delta: -0.5
        scaledownratio: 0.2
    request:
      timeout: 60s
      maxbodysize: 128m
      proxybuffersize: 4k
      proxybuffersnumber: 4
      clientbodybuffersize: 8k
    secrets:
      keys:
        secret-file-1.json: c29tZSBzZWNyZXQgdmFsdWU=
        secret-file-2.yaml: YW5vdGhlciBzZWNyZXQgdmFsdWU=
        bool-file: true
        int-file: 123123
      mountpath: /secrets
    configs:
      # these are local files with golang template style placeholders, replaced with the values specified in the data section;
      # set clone: true on the release target to ensure you have access to these files stored in your repository
      files:
      - config/config.json
      - config/anotherconfig.yaml
      # these are the values for the placeholders specified as {{.property1}} to be replaced in the config files
      data:
        property1: value 1
        property2: value 2
        property4: true
        property5: 123123
      # if you want to avoid cloning your repository and just need to pass a very short config you can inline full files here
      inline:
        inline-config.properties: |
          enemies=aliens
          lives=3
      mountpath: /configs
    volumemounts:
    - name: client-certs
      mountpath: /cockroach-certs
      volume:
        secret:
          secretName: estafette.client.estafette
          items:
          - key: key
            path: key
            mode: 0600
          - key: cert
            path: cert
    manifests:
      files:
      - override/service.yaml
      data:
        property3: value 3
        property6: true
        property7: 123123
    hosts:
    - gke.estafette.io
    - gke-deploy.estafette.io
    internalhosts:
    - gke.estafette.internal
    - gke-deploy.estafette.local
    basepath: /
    enablePayloadLogging: true
    useGoogleCloudCredentials: true
    disableServiceAccountKeyRotation: false
    googleCloudCredentialsApp: gke
    chaosproof: true
    rollingupdate:
      maxsurge: 25%
      maxunavailable: 25%
      timeout: 2m
    trustedips:
    - 103.21.244.0/22
    - 103.22.200.0/22
    - 103.31.4.0/22
    dryrun: true

  test-minimal-alpha-version:
    image: extensions/gke:${ESTAFETTE_BUILD_VERSION}
    credentials: gke-tooling
    container:
      repository: extensions
    hosts:
    - gke.estafette.io
    dryrun: true

  test-alpha-version-job:
    image: extensions/gke:${ESTAFETTE_BUILD_VERSION}
    credentials: gke-tooling
    kind: job
    container:
      repository: extensions
    dryrun: true

  test-alpha-version-cronjob:
    image: extensions/gke:${ESTAFETTE_BUILD_VERSION}
    credentials: gke-tooling
    kind: cronjob
    schedule: "*/5 * * * *"
    concurrencypolicy: Forbid
    container:
      repository: extensions
    dryrun: true

  test-alpha-version-canary:
    image: extensions/gke:${ESTAFETTE_BUILD_VERSION}
    credentials: gke-tooling
    action: deploy-canary
    container:
      repository: extensions
    hosts:
    - gke.estafette.io
    dryrun: true

  test-alpha-version-rollforward:
    image: extensions/gke:${ESTAFETTE_BUILD_VERSION}
    credentials: gke-tooling
    action: deploy-stable
    container:
      repository: extensions
    hosts:
    - gke.estafette.io
    dryrun: true

  test-alpha-version-rollback:
    image: extensions/gke:${ESTAFETTE_BUILD_VERSION}
    credentials: gke-tooling
    action: rollback-canary
    dryrun: true

  push-to-docker-hub:
    image: extensions/docker:dev
    action: push
    container: gke
    repositories:
    - extensions
    tags:
    - dev

  slack-notify:
    image: extensions/slack-build-status:dev
    workspace: estafette
    channels:
    - '#build-status'
    when:
      status == 'succeeded' ||
      status == 'failed'

releases:
  babysitter:
    stages:
      tag-container-image:
        image: extensions/docker:stable
        action: tag
        container: gke
        repositories:
        - extensions
        tags:
        - babysitter

      slack-notify:
        image: extensions/slack-build-status:dev
        workspace: estafette
        channels:
        - '#release-status'
        when:
          status == 'succeeded' ||
          status == 'failed'

  beta:
    stages:
      tag-container-image:
        image: extensions/docker:stable
        action: tag
        container: gke
        repositories:
        - extensions
        tags:
        - beta

      slack-notify:
        image: extensions/slack-build-status:dev
        workspace: estafette
        channels:
        - '#release-status'
        when:
          status == 'succeeded' ||
          status == 'failed'

  stable:
    stages:
      tag-container-image:
        image: extensions/docker:stable
        action: tag
        container: gke
        repositories:
        - extensions
        tags:
        - stable
        - latest

      slack-notify:
        image: extensions/slack-build-status:dev
        workspace: estafette
        channels:
        - '#release-status'
        when:
          status == 'succeeded' ||
          status == 'failed'