{{- if .Values.Include.Deployment -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gke-app.fullname" . }}
  labels:
    {{- include "gke-app.labels" . | nindent 4 }}
spec:
  {{- if .Values.IncludeReplicas}}
  replicas: {{.Values.Replicas}}
  {{- end}}
  strategy:
    type: {{.Values.StrategyType}}
    {{- if eq .Values.StrategyType "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{.Values.RollingUpdateMaxSurge}}
      maxUnavailable: {{.Values.RollingUpdateMaxUnavailable}}
    {{- end}}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{.Values.AppLabelSelector}}
      {{- if .Values.IncludeTrackLabel}}
      track: {{.Values.TrackLabel}}
      {{- end}}
  template:
    metadata:
      labels:
        {{- range $key, $value := .Values.PodLabels}}
        {{$key}}: "{{$value}}"
        {{- end}}
        {{- if .Values.IncludeTrackLabel}}
        track: {{.Values.TrackLabel}}
        {{- end}}
      annotations:
        prometheus.io/scrape: "{{.Values.Container.Metrics.Scrape}}"
        prometheus.io/path: "{{.Values.Container.Metrics.Path}}"
        prometheus.io/port: "{{.Values.Container.Metrics.Port}}"
        prometheus.io/scrape-nginx-sidecar: "{{.Values.HasOpenrestySidecar}}"
        {{- if .Values.AddSafeToEvictAnnotation }}
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        {{- end}}
    spec:
      serviceAccount: {{ include "gke-app.fullname" . }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ include "gke-app.fullname" . }}
              topologyKey: kubernetes.io/hostname
        {{- if .Values.PreferPreemptibles}}
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            preference:
              matchExpressions:
              - key: cloud.google.com/gke-preemptible
                operator: In
                values:
                - "true"
        {{- end}}
      {{- if .Values.HasInitContainers }}
      initContainers:
{{(call $.ToYAML .Values.InitContainers) | indent 6}}
      {{- end}}
      containers:
      - name: {{ include "gke-app.fullname" . }}
        image: {{.Values.Container.Repository}}/{{.Values.Container.Name}}:{{.Values.Container.Tag}}
        imagePullPolicy: IfNotPresent
        env:
        - name: "JAEGER_AGENT_HOST"
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: "JAEGER_SAMPLER_MANAGER_HOST_PORT"
          value: "http://$(JAEGER_AGENT_HOST):5778/sampling"
        {{- range $key, $value := .Values.Container.EnvironmentVariables }}
        - name: "{{ $key }}"
          {{- if (call $.IsSimpleEnvvarValue $value) }}
          value: "{{ $value }}"
          {{- else }}
{{(call $.RenderToYAML $value $) | indent 10}}
          {{- end }}
        {{- end }}
        resources:
          requests:
            cpu: {{.Values.Container.CPURequest}}
            memory: {{.Values.Container.MemoryRequest}}
          limits:
            cpu: {{.Values.Container.CPULimit}}
            memory: {{.Values.Container.MemoryLimit}}
        ports:
        - name: web
          containerPort: {{.Values.Container.Port}}
        {{- range .AdditionalContainerPorts}}
        - name: {{ include "gke-app.fullname" . }}
          containerPort: {{.Values.Port}}
          protocol: {{.Values.Protocol}}
        {{- end}}
        {{- if .Values.Container.Liveness.IncludeOnContainer }}
        livenessProbe:
          httpGet:
            path: {{.Values.Container.Liveness.Path}}
            port: {{.Values.Container.Liveness.Port}}
          initialDelaySeconds: {{.Values.Container.Liveness.InitialDelaySeconds}}
          timeoutSeconds: {{.Values.Container.Liveness.TimeoutSeconds}}
          periodSeconds: {{.Values.Container.Liveness.PeriodSeconds}}
          failureThreshold: {{.Values.Container.Liveness.FailureThreshold}}
          successThreshold: {{.Values.Container.Liveness.SuccessThreshold}}
        {{- end }}
        {{- if .Values.Container.Readiness.IncludeOnContainer }}
        readinessProbe:
          httpGet:
            path: {{.Values.Container.Readiness.Path}}
            port: {{.Values.Container.Readiness.Port}}
          initialDelaySeconds: {{.Values.Container.Readiness.InitialDelaySeconds}}
          timeoutSeconds: {{.Values.Container.Readiness.TimeoutSeconds}}
          periodSeconds: {{.Values.Container.Readiness.PeriodSeconds}}
          failureThreshold: {{.Values.Container.Readiness.FailureThreshold}}
          successThreshold: {{.Values.Container.Readiness.SuccessThreshold}}
        {{- end }}
        {{- if or .Values.MountApplicationSecrets .Values.MountConfigmap .Values.MountServiceAccountSecret .Values.MountPayloadLogging .Values.MountAdditionalVolumes }}
        volumeMounts:
        {{- if .Values.MountApplicationSecrets }}
        - name: app-secrets
          mountPath: {{.Values.SecretMountPath}}
        {{- end }}
        {{- if .Values.MountConfigmap }}
        - name: app-configs
          mountPath: {{.Values.ConfigMountPath}}
        {{- end }}
        {{- if or .Values.MountServiceAccountSecret }}
        - name: gcp-service-account
          mountPath: /gcp-service-account
        {{- end }}
        {{- if .Values.MountPayloadLogging }}
        - name: pod-log
          mountPath: /var/log/travix
        {{- end }}
        {{- range .Values.AdditionalVolumeMounts}}
        - name: {{ include "gke-app.fullname" . }}
          mountPath: {{.Values.MountPath}}
        {{- end}}
        {{- end }}
        {{- if .Values.Container.UseLifecyclePreStopSleepCommand }}
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sleep
              - {{.Values.Container.PreStopSleepSeconds}}s
        {{- end}}
      {{ $deployment := .Values }}
      {{- range .Sidecars}}
        {{- if eq .Type "openresty" }}
      - name: {{$deployment.Name}}-openresty
        image: {{.Image}}
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: {{.CPURequest}}
            memory: {{.MemoryRequest}}
          limits:
            cpu: {{.CPULimit}}
            memory: {{.MemoryLimit}}
        ports:
        - name: http
          containerPort: 80
        {{- if not $deployment.UseESP }}
        - name: https
          containerPort: 443
        {{- end}}
        - name: nginx-liveness
          containerPort: 82
        - name: nginx-readiness
          containerPort: 81
        - name: nginx-prom
          containerPort: 9101
        env:
        - name: "JAEGER_AGENT_HOST"
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: "JAEGER_SAMPLER_MANAGER_HOST_PORT"
          value: "http://$(JAEGER_AGENT_HOST):5778/sampling"
        - name: "OFFLOAD_TO_HOST"
          value: "127.0.0.1"
        - name: "OFFLOAD_TO_PORT"
          value: "{{$deployment.Container.Port}}"
        - name: "SERVICE_NAME"
          value: "{{$deployment.Name}}"
        - name: "NAMESPACE"
          value: "{{$deployment.Namespace}}"
        - name: "HEALT_CHECK_PATH"
          value: "{{index .SidecarSpecificProperties "healthcheckpath"}}"
        {{- range $key, $value := .EnvironmentVariables }}
        - name: "{{ $key }}"
          {{- if (call $.IsSimpleEnvvarValue $value) }}
          value: "{{ $value }}"
          {{- else }}
{{(call $.RenderToYAML $value $) | indent 10}}
          {{- end }}
        {{- end }}
        volumeMounts:
        - name: ssl-certificate
          mountPath: /etc/ssl/private
        livenessProbe:
          httpGet:
            path: /liveness
            port: nginx-liveness
          initialDelaySeconds: 15
        readinessProbe:
          httpGet:
            path: {{$deployment.Container.Readiness.Path}}
            {{- if not $deployment.UseESP }}
            port: https
            scheme: HTTPS
            {{- else }}
            port: http
            {{- end}}
          initialDelaySeconds: {{$deployment.Container.Readiness.InitialDelaySeconds}}
          timeoutSeconds: {{$deployment.Container.Readiness.TimeoutSeconds}}
          periodSeconds: {{$deployment.Container.Readiness.PeriodSeconds}}
          failureThreshold: {{$deployment.Container.Readiness.FailureThreshold}}
          successThreshold: {{$deployment.Container.Readiness.SuccessThreshold}}
        {{- if .HasCustomProperties }}
{{.CustomPropertiesYAML | indent 8}}
        {{- end }}
        {{- else if eq .Type "esp" }}
      - name: {{$deployment.Name}}-esp
        image: {{.Image}}
        imagePullPolicy: IfNotPresent
        args: [
          "--ssl_port", "8443",
          "--backend", "127.0.0.1:80",
          "--service", "{{$deployment.HostsJoined}}",
          "--service_account_key", "/gcp-service-account/service-account-key.json",
          {{- if $deployment.HasEspConfigID }}
          "--version","{{$deployment.EspConfigID}}"
          {{- else }}
          "--rollout_strategy", "managed"
          {{- end }}
        ]
        resources:
          requests:
            cpu: {{.CPURequest}}
            memory: {{.MemoryRequest}}
          limits:
            cpu: {{.CPULimit}}
            memory: {{.MemoryLimit}}
        ports:
        - name: https
          containerPort: 8443
        - name: esp-status
          containerPort: 8090
        volumeMounts:
        - name: ssl-certificate-esp
          mountPath: /etc/nginx/ssl
        - name: gcp-service-account
          mountPath: /gcp-service-account
        livenessProbe:
          httpGet:
            path: /healthz
            port: esp-status
          initialDelaySeconds: 15
        {{- if .HasCustomProperties }}
{{.CustomPropertiesYAML | indent 8}}
        {{- end }}
        {{- else if eq .Type "cloudsqlproxy" }}
      - name: {{$deployment.Name}}-cloudsql-proxy
        image: {{.Image}}
        {{- if .HasEnvironmentVariables }}
        env:
        {{- range $key, $value := .EnvironmentVariables }}
        - name: "{{ $key }}"
          {{- if (call $.IsSimpleEnvvarValue $value) }}
          value: "{{ $value }}"
          {{- else }}
{{(call $.RenderToYAML $value $) | indent 10}}
          {{- end }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            cpu: {{.CPURequest}}
            memory: {{.MemoryRequest}}
          limits:
            cpu: {{.CPULimit}}
            memory: {{.MemoryLimit}}
        command: ["/cloud_sql_proxy",
                  "-instances={{ index .SidecarSpecificProperties "dbinstanceconnectionname" }}=tcp:{{ index .SidecarSpecificProperties "sqlproxyport" }}",
                  "-credential_file=/gcp-service-account/service-account-key.json",
                  "-term_timeout={{ index .SidecarSpecificProperties "sqlproxyterminationtimeoutseconds" }}s"]
          {{- if or $deployment.MountServiceAccountSecret }}
        volumeMounts:
          - name: gcp-service-account
            mountPath: /gcp-service-account
          {{- end }}
        {{- if .HasCustomProperties }}
{{.CustomPropertiesYAML | indent 8}}
        {{- end }}
        {{- else  }}
      - name: {{$deployment.Name}}-{{.Type}}
        image: {{.Image}}
        {{- if .HasEnvironmentVariables }}
        env:
        {{- range $key, $value := .EnvironmentVariables }}
        - name: "{{ $key }}"
          {{- if (call $.IsSimpleEnvvarValue $value) }}
          value: "{{ $value }}"
          {{- else }}
{{(call $.RenderToYAML $value $) | indent 10}}
          {{- end }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            cpu: {{.CPURequest}}
            memory: {{.MemoryRequest}}
          limits:
            cpu: {{.CPULimit}}
            memory: {{.MemoryLimit}}
        {{- if or $deployment.MountApplicationSecrets $deployment.MountConfigmap $deployment.MountServiceAccountSecret $deployment.MountAdditionalVolumes }}
        volumeMounts:
        {{- if $deployment.MountApplicationSecrets }}
        - name: app-secrets
          mountPath: {{$deployment.SecretMountPath}}
        {{- end }}
        {{- if $deployment.MountConfigmap }}
        - name: app-configs
          mountPath: {{$deployment.ConfigMountPath}}
        {{- end }}
        {{- if $deployment.MountServiceAccountSecret }}
        - name: gcp-service-account
          mountPath: /gcp-service-account
        {{- end }}
        {{- range $deployment.AdditionalVolumeMounts}}
        - name: {{ include "gke-app.fullname" . }}
          mountPath: {{.MountPath}}
        {{- end}}
        {{- end}}
        {{- if .HasCustomProperties }}
{{.CustomPropertiesYAML | indent 8}}
        {{- end }} 
        {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: 300
      {{- if .Values.MountVolumes }}
      volumes:
      {{- if .Values.MountSslCertificate }}
      - name: ssl-certificate
        secret:
          {{- if .Values.UseCertificateSecret }}
          secretName: {{.Values.CertificateSecretName}}
          {{- else }}
          secretName: {{ include "gke-app.fullname" . }}-letsencrypt-certificate
          {{- end }}
      {{- end }}
      {{- if .Values.UseESP }}
      - name: ssl-certificate-esp
        secret:
          {{- if .Values.UseCertificateSecret }}
          secretName: {{.Values.CertificateSecretName}}
          {{- else }}
          secretName: {{ include "gke-app.fullname" . }}-letsencrypt-certificate
          {{- end }}
          items:
          - key: ssl.crt
            path: nginx.crt
          - key: ssl.key
            path: nginx.key
      {{- end }}
      {{- if .Values.MountApplicationSecrets }}
      - name: app-secrets
        secret:
          secretName: {{.Values.NameWithTrack}}-secrets
      {{- end }}
      {{- if .Values.MountConfigmap }}
      - name: app-configs
        configMap:
          name: {{.Values.NameWithTrack}}-configs
      {{- end }}
      {{- if or .Values.MountServiceAccountSecret }}
      - name: gcp-service-account
        secret:
          secretName: {{.Values.GoogleCloudCredentialsAppName}}-gcp-service-account
      {{- end }}
      {{- if .Values.MountPayloadLogging }}
      - name: pod-log
        hostPath:
          path: /var/log/fluentd-payload-logger/{{ include "gke-app.fullname" . }}
          type: DirectoryOrCreate
      - name: var-log
        hostPath:
          path: /var/log
      {{- end }}
      {{- range .Values.AdditionalVolumeMounts}}
      - name: {{ include "gke-app.fullname" . }}
{{.VolumeYAML | indent 8}}
      {{- end}}
      {{- end }}
{{- end -}}