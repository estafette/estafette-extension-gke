// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package generator is a generated GoMock package.
package generator

import (
	api "github.com/estafette/estafette-extension-gke/api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GenerateTemplateData mocks base method
func (m *MockService) GenerateTemplateData(params api.Params, currentReplicas int, gitSource, gitOwner, gitName, gitBranch, gitRevision, releaseID, triggeredBy string) api.TemplateData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTemplateData", params, currentReplicas, gitSource, gitOwner, gitName, gitBranch, gitRevision, releaseID, triggeredBy)
	ret0, _ := ret[0].(api.TemplateData)
	return ret0
}

// GenerateTemplateData indicates an expected call of GenerateTemplateData
func (mr *MockServiceMockRecorder) GenerateTemplateData(params, currentReplicas, gitSource, gitOwner, gitName, gitBranch, gitRevision, releaseID, triggeredBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTemplateData", reflect.TypeOf((*MockService)(nil).GenerateTemplateData), params, currentReplicas, gitSource, gitOwner, gitName, gitBranch, gitRevision, releaseID, triggeredBy)
}

// BuildSidecar mocks base method
func (m *MockService) BuildSidecar(sidecar *api.SidecarParams, params api.Params) api.SidecarData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSidecar", sidecar, params)
	ret0, _ := ret[0].(api.SidecarData)
	return ret0
}

// BuildSidecar indicates an expected call of BuildSidecar
func (mr *MockServiceMockRecorder) BuildSidecar(sidecar, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSidecar", reflect.TypeOf((*MockService)(nil).BuildSidecar), sidecar, params)
}

// AddEnvironmentVariableIfNotSet mocks base method
func (m *MockService) AddEnvironmentVariableIfNotSet(environmentVariables map[string]interface{}, name, value string) map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEnvironmentVariableIfNotSet", environmentVariables, name, value)
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// AddEnvironmentVariableIfNotSet indicates an expected call of AddEnvironmentVariableIfNotSet
func (mr *MockServiceMockRecorder) AddEnvironmentVariableIfNotSet(environmentVariables, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnvironmentVariableIfNotSet", reflect.TypeOf((*MockService)(nil).AddEnvironmentVariableIfNotSet), environmentVariables, name, value)
}

// IsSimpleEnvvarValue mocks base method
func (m *MockService) IsSimpleEnvvarValue(i interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSimpleEnvvarValue", i)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSimpleEnvvarValue indicates an expected call of IsSimpleEnvvarValue
func (mr *MockServiceMockRecorder) IsSimpleEnvvarValue(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSimpleEnvvarValue", reflect.TypeOf((*MockService)(nil).IsSimpleEnvvarValue), i)
}

// ToYAML mocks base method
func (m *MockService) ToYAML(v interface{}) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToYAML", v)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToYAML indicates an expected call of ToYAML
func (mr *MockServiceMockRecorder) ToYAML(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToYAML", reflect.TypeOf((*MockService)(nil).ToYAML), v)
}

// RenderToYAML mocks base method
func (m *MockService) RenderToYAML(v, data interface{}) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderToYAML", v, data)
	ret0, _ := ret[0].(string)
	return ret0
}

// RenderToYAML indicates an expected call of RenderToYAML
func (mr *MockServiceMockRecorder) RenderToYAML(v, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderToYAML", reflect.TypeOf((*MockService)(nil).RenderToYAML), v, data)
}
