// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package extension is a generated GoMock package.
package extension

import (
	context "context"
	reflect "reflect"

	api "github.com/estafette/estafette-extension-gke/api"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockService) Run(ctx context.Context, credential *api.GKECredentials, releaseName, paramsYAML, gitSource, gitOwner, gitName, appLabel, buildVersion, releaseAction, releaseID, gitBranch, gitRevision, triggeredBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, credential, releaseName, paramsYAML, gitSource, gitOwner, gitName, appLabel, buildVersion, releaseAction, releaseID, gitBranch, gitRevision, triggeredBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockServiceMockRecorder) Run(ctx, credential, releaseName, paramsYAML, gitSource, gitOwner, gitName, appLabel, buildVersion, releaseAction, releaseID, gitBranch, gitRevision, triggeredBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockService)(nil).Run), ctx, credential, releaseName, paramsYAML, gitSource, gitOwner, gitName, appLabel, buildVersion, releaseAction, releaseID, gitBranch, gitRevision, triggeredBy)
}
